#!/usr/bin/env python3
"""
Generate .lycheeignore file from data/hpc-sites.yaml

This script reads the HPC Sites datafile and generates ignore patterns in
.lycheeignore, as read by Lychee in checking links on the website
"""
import re
import sys
from pathlib import Path
from typing import Dict, List, Union, Literal

import config

# Define allowable type for exclusions
ExcludeType = Union[Literal["domain"], Literal["base_url"], Literal["path"], bool]


def load_existing_exclusions(lycheeignore_path: Path) -> List[str]:
    """Load manually defined exclusions from .lycheeignore file.

    Reads the .lycheeignore file and extracts only the manually defined exclusions,
    ignoring any content between the autogenerated markers.

    Args:
        lycheeignore_path: Path to the .lycheeignore file

    Returns:
        List of manually defined exclusion patterns

    Example content:
        # Manual exclusions
        https://intranet.university.ac.uk/

        # BEGIN AUTOGENERATED EXCLUSIONS
        # (This section is ignored)
        # END AUTOGENERATED EXCLUSIONS
    """
    if not lycheeignore_path.exists():
        return []

    exclusions = []
    in_auto_section = False

    with open(lycheeignore_path) as f:
        for line in f:
            if line.strip() == "# BEGIN AUTOGENERATED EXCLUSIONS":
                in_auto_section = True
            elif line.strip() == "# END AUTOGENERATED EXCLUSIONS":
                in_auto_section = False
                continue
            elif not in_auto_section and line.strip() and not line.startswith("#"):
                exclusions.append(line.strip())

    return exclusions


def generate_exclusion_pattern(url: str, exclude_type: ExcludeType) -> str:
    """Generate a lychee-compatible exclusion pattern for a URL.

    Creates an exclusion pattern based on the specified type:
    - domain: Excludes entire domain using regex (^https?://domain/)
    - base_url: Excludes specific base URL and subdirectories
    - path: Excludes exact URL path
    - true: Same as 'path' for backward compatibility
    - false: No exclusion generated

    Args:
        url: The URL to generate an exclusion pattern for
        exclude_type: The type of exclusion to generate

    Returns:
        A lychee-compatible exclusion pattern or empty string if no exclusion

    Examples:
        >>> generate_exclusion_pattern("https://docs.edu/guide/", "domain")
        "^https?://docs\\.edu/"
        >>> generate_exclusion_pattern("https://docs.edu/guide/", "base_url")
        "^https://docs\\.edu/guide/"
        >>> generate_exclusion_pattern("https://docs.edu/guide/", "path")
        "https://docs.edu/guide/"
    """
    if not exclude_type or exclude_type is False:
        return ""

    # Handle boolean True as "path"
    if exclude_type is True:
        exclude_type = "path"

    if exclude_type == "domain":
        # Extract domain and create regex pattern
        domain = re.sub(r"^https?://", "", url).split("/")[0]
        return f"^https?://{re.escape(domain)}/"
    elif exclude_type == "base_url":
        # Remove trailing slashes and create base URL pattern
        base = re.sub(r"/+$", "", url)
        return f"^{re.escape(base)}/"
    else:  # path
        return url


def generate_exclusions(sites_data: Dict) -> List[str]:
    """Generate exclusion patterns from the HPC sites YAML data.

    Processes the sites data structure and generates appropriate lychee
    exclusion patterns for each site that has link_check_exclude set.

    Args:
        sites_data: Dictionary containing the parsed YAML data
                   Expected structure:
                   {
                       "sites": [
                           {
                               "name": "Site Name",
                               "url": "https://...",
                               "link_check_exclude": "domain"|"base_url"|"path"|true|false
                           },
                           ...
                       ]
                   }

    Returns:
        List of lychee-compatible exclusion patterns
    """
    exclusions = []

    for site in sites_data.get("sites", []):
        exclude_type = site.get("link_check_exclude", False)
        if exclude_type:
            pattern = generate_exclusion_pattern(site["url"], exclude_type)
            if pattern:
                exclusions.append(pattern)

    return exclusions


def write_lycheeignore(
    path: Path, manual_exclusions: List[str], auto_exclusions: List[str]
):
    """Write combined manual and auto-generated exclusions to .lycheeignore.

    Creates or updates the .lycheeignore file with both manual and auto-generated
    exclusions. Manual exclusions are preserved at the top of the file, while
    auto-generated exclusions are placed in a marked section that can be updated
    automatically.

    Args:
        path: Path to the .lycheeignore file
        manual_exclusions: List of manually defined exclusion patterns
        auto_exclusions: List of auto-generated exclusion patterns

    Generated file structure:
        # Manual exclusions
        [manual exclusions]

        # BEGIN AUTOGENERATED EXCLUSIONS
        # This section is automatically generated from hpc-sites.yaml
        # DO NOT EDIT THIS SECTION MANUALLY
        [auto-generated exclusions]
        # END AUTOGENERATED EXCLUSIONS
    """
    with open(path, "w") as f:
        if manual_exclusions:
            f.write("# Manual exclusions\n")
            f.write("\n".join(manual_exclusions))
            f.write("\n\n")

        f.write("# BEGIN AUTOGENERATED EXCLUSIONS\n")
        f.write("# This section is automatically generated from hpc-sites.yaml\n")
        f.write("# DO NOT EDIT THIS SECTION MANUALLY\n")
        if auto_exclusions:
            f.write("\n".join(auto_exclusions))
            f.write("\n")
        f.write("# END AUTOGENERATED EXCLUSIONS\n")


def main():
    """Main entry point for the exclusion pattern generator.

    Processes the HPC sites YAML data and updates the .lycheeignore file
    with appropriate exclusion patterns. Can run in two modes:

    1. Update mode (default):
       - Loads manual exclusions from existing .lycheeignore
       - Generates new patterns from hpc-sites.yaml
       - Writes combined patterns back to .lycheeignore

    2. Check mode (--check):
       - Verifies if .lycheeignore is in sync with hpc-sites.yaml
       - Exits with status 1 if update is needed
       - Used in CI to ensure changes are committed

    Usage:
        python make_exclusions.py          # Update .lycheeignore
        python make_exclusions.py --check  # Verify sync status
        python make_exclusions.py --test   # Run pattern generation tests
    """

    test_only = "--test" in sys.argv
    check_only = "--check" in sys.argv

    if test_only:
        print(run_tests())
        sys.exit(0)

    repo_root = Path(__file__).parent.parent
    sites_yaml = repo_root / config.DATA_PATH
    lycheeignore = repo_root / config.IGNORE_PATH

    # Load and process exclusions
    sites_data = config.load_sites_config(sites_yaml)

    manual_exclusions = load_existing_exclusions(lycheeignore)
    auto_exclusions = generate_exclusions(sites_data)

    if check_only:
        # Generate temporary content to compare
        temp_content = []
        if manual_exclusions:
            temp_content.extend(["# Manual exclusions"] + manual_exclusions + [""])
        temp_content.extend(
            [
                "# BEGIN AUTOGENERATED EXCLUSIONS",
                "# This section is automatically generated from hpc-sites.yaml",
                "# DO NOT EDIT THIS SECTION MANUALLY",
            ]
        )
        if auto_exclusions:
            temp_content.extend(auto_exclusions)
        temp_content.append("# END AUTOGENERATED EXCLUSIONS")

        # Compare with existing file
        if lycheeignore.exists():
            with open(lycheeignore) as f:
                current_content = f.read().splitlines()
            if current_content != temp_content:
                print("Error: .lycheeignore is out of sync with hpc-sites.yaml")
                sys.exit(1)
            else:
                print("Check passed: .lycheeignore matches hpc-sites.yaml")
    else:
        write_lycheeignore(lycheeignore, manual_exclusions, auto_exclusions)


def run_tests():
    """Test exclusion pattern generation with example YAML.

    Test supported exclusion patterns:
    - domain: Excludes an entire domain and its subdomains using regex
    - base_url: Excludes a specific base URL and everything under it
    - path: Excludes an exact URL path
    - true: Same as 'path' (for backward compatibility)
    - false: No exclusion generated
    """
    import yaml

    example_yaml = """
sites:
  # Example: Exclude entire domain and subdomains
  - name: "Domain Exclusion Example"
    url: "https://docs.example.ac.uk/hpc/"
    tier: 3
    link_check_exclude: "domain"  # Will generate: ^https?://docs\\.example\\.ac\\.uk/
    search:
      include: false
    
  # Example: Exclude specific base URL and everything under it
  - name: "Base URL Exclusion Example"
    url: "https://www.university.ac.uk/research/hpc/"
    tier: 3
    link_check_exclude: "base_url"  # Will generate: ^https://www\\.university\\.ac\\.uk/research/hpc/
    
  # Example: Exclude exact path only
  - name: "Path Exclusion Example"
    url: "https://hpc.institute.ac.uk/docs/access/"
    tier: 3
    link_check_exclude: "path"  # Will generate: https://hpc.institute.ac.uk/docs/access/
    
  # Example: Boolean true (same as path)
  - name: "Boolean True Example"
    url: "https://compute.org/manual/"
    tier: 3
    link_check_exclude: true  # Will generate: https://compute.org/manual/
    
  # Example: No exclusion
  - name: "No Exclusion Example"
    url: "https://hpc.edu/guide/"
    tier: 3
    link_check_exclude: false  # Will not generate any exclusion
    """

    # Parse example YAML and demonstrate exclusion generation
    sites_data = yaml.safe_load(example_yaml)
    config.validate_sites(sites_data)

    output = ["Generated exclusion patterns:"]

    for site in sites_data["sites"]:
        pattern = generate_exclusion_pattern(site["url"], site["link_check_exclude"])
        if pattern:
            output.extend(
                [
                    f"- {site['name']}:",
                    f"  URL: {site['url']}",
                    f"  Type: {site['link_check_exclude']}",
                    f"  Pattern: {pattern}",
                    "",
                ]
            )

    return "\n".join(output)


if __name__ == "__main__":
    main()
